import * as Notifications from 'expo-notifications';
import * as Device from 'expo-device';
import { Platform } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';

// Bildirim davranƒ±≈üƒ±nƒ± ayarlayalƒ±m
Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldShowAlert: true,
    shouldPlaySound: true,
    shouldSetBadge: false,
  }),
});

class NotificationService {
  constructor() {
    // Sadece local notifications kullanƒ±yoruz, push token gerekmez
  }

  // Bildirim izinlerini al (sadece local notifications)
  async requestPermissions() {
    try {
      if (Platform.OS === 'android') {
        await Notifications.setNotificationChannelAsync('default', {
          name: 'DoTime Bildirimleri',
          importance: Notifications.AndroidImportance.MAX,
          vibrationPattern: [0, 250, 250, 250],
          lightColor: '#007AFF',
        });
      }

      // Local notification permissions
      const { status: existingStatus } = await Notifications.getPermissionsAsync();
      let finalStatus = existingStatus;
      
      if (existingStatus !== 'granted') {
        const { status } = await Notifications.requestPermissionsAsync({
          ios: {
            allowAlert: true,
            allowBadge: true,
            allowSound: true,
            allowAnnouncements: false,
          },
        });
        finalStatus = status;
      }
      
      if (finalStatus !== 'granted') {
        console.log('‚ùå Bildirim izni reddedildi');
        return false;
      }
      
      console.log('‚úÖ Local bildirim izni verildi');
      return true;
    } catch (error) {
      console.error('Bildirim izni alƒ±nƒ±rken hata:', error);
      return false;
    }
  }

  // Anƒ±nda bildirim g√∂nder (test i√ßin)
  async sendImmediateNotification(title, body, data = {}) {
    try {
      await Notifications.scheduleNotificationAsync({
        content: {
          title: title,
          body: body,
          data: data,
          sound: 'default',
        },
        trigger: null, // Hemen g√∂nder
      });
      
      console.log('Bildirim g√∂nderildi:', title);
      return true;
    } catch (error) {
      console.error('Bildirim g√∂nderilirken hata:', error);
      return false;
    }
  }

  // Zamanlanmƒ±≈ü bildirim g√∂nder - YENƒ∞ VE BASƒ∞T VERSƒ∞YON
  async scheduleNotification(title, body, triggerDate, data = {}) {
    try {
      // G√ºvenlik kontrol√º: Ge√ßmi≈ü bir tarih i√ßin bildirim kurmayƒ± engelle
      if (triggerDate < new Date()) {
        console.log(`üö® HATA: Tetikleme tarihi (${triggerDate.toLocaleString('tr-TR')}) ge√ßmi≈üte. Bildirim iptal edildi.`);
        return null;
      }

      console.log(`‚úÖ Bildirim zamanlanacak: "${title}"`);
      console.log(`   ‚è∞ Tetikleme zamanƒ±: ${triggerDate.toLocaleString('tr-TR')}`);

      const notificationId = await Notifications.scheduleNotificationAsync({
        content: {
          title: title,
          body: body,
          data: data,
          sound: 'default',
        },
        // ANAHTAR DEƒûƒ∞≈ûƒ∞KLƒ∞K: Saniye hesabƒ± yok, direkt Date objesini veriyoruz.
        // Telefonun i≈ületim sistemi en doƒüru zamanlamayƒ± yapacak.
        trigger: triggerDate,
      });

      console.log(`üëç Bildirim ba≈üarƒ±yla zamanlandƒ±. ID: ${notificationId}`);
      return notificationId;

    } catch (error) {
      console.error('‚ùå Zamanlanmƒ±≈ü bildirim olu≈üturulurken hata:', error);
      return null;
    }
  }

  // Kalan s√ºreyi hesapla ve formatla
  formatTimeRemaining(deadline) {
    const now = new Date();
    const deadlineDate = new Date(deadline);
    const diffMs = deadlineDate - now;
    
    if (diffMs <= 0) {
      return 'S√ºre doldu!';
    }
    
    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
    const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));
    const diffDays = Math.floor(diffHours / 24);
    
    if (diffDays > 0) {
      return `${diffDays} g√ºn ${diffHours % 24} saat kaldƒ±`;
    } else if (diffHours > 0) {
      return `${diffHours} saat ${diffMinutes} dakika kaldƒ±`;
    } else {
      return `${diffMinutes} dakika kaldƒ±`;
    }
  }

  // √ñncelik emojisi getir
  getPriorityEmoji(category) {
    switch (category) {
      case 'Urgent':
        return 'üö®'; // Acil
      case 'Important':
        return '‚≠ê'; // √ñnemli
      case 'Work':
        return 'üíº'; // ƒ∞≈ü
      case 'Personal':
        return 'üè†'; // Ki≈üisel
      default:
        return 'üìã'; // Normal
    }
  }

  // --- Bƒ∞LDƒ∞Rƒ∞M MANTIƒûI YENƒ∞DEN YAZILDI ---
  // √ñnceki 'scheduleTaskReminder' ve 'scheduleMultipleReminders' fonksiyonlarƒ±,
  // hatalarƒ± gidermek i√ßin tek ve daha basit bir fonksiyonda birle≈ütirildi.
  async scheduleMultipleReminders(task) {
    const taskDate = new Date(task.deadline);
    const now = new Date();
    const scheduledNotifications = [];
    let notificationSettings;

    try {
      const storedSettings = await AsyncStorage.getItem('notificationSettings');
      notificationSettings = storedSettings ? JSON.parse(storedSettings) : {
        enabled: true,
        tenMinutes: true,
        thirtyMinutes: false,
        oneHour: true,
        threeHours: false,
        twentyFourHours: false,
      };
    } catch (error) {
      console.error('Bildirim ayarlarƒ± okunurken hata, varsayƒ±lanlar kullanƒ±lƒ±yor:', error);
      // Hata durumunda en temel ayarlarƒ± kullan
      notificationSettings = { enabled: true, tenMinutes: true, oneHour: true };
    }

    if (!notificationSettings.enabled) {
      console.log('Bildirimler kullanƒ±cƒ± tarafƒ±ndan kapatƒ±lmƒ±≈ü, i≈ülem durduruldu.');
      return [];
    }
    
    console.log('Kullanƒ±lan bildirim ayarlarƒ±:', notificationSettings);

    const reminderTimes = [];
    if (notificationSettings.tenMinutes) reminderTimes.push({ minutes: 10, label: '10 dakika' });
    if (notificationSettings.thirtyMinutes) reminderTimes.push({ minutes: 30, label: '30 dakika' });
    if (notificationSettings.oneHour) reminderTimes.push({ minutes: 60, label: '1 saat' });
    if (notificationSettings.threeHours) reminderTimes.push({ minutes: 180, label: '3 saat' });
    if (notificationSettings.twentyFourHours) reminderTimes.push({ minutes: 1440, label: '24 saat' });

    console.log(`Toplam ${reminderTimes.length} farklƒ± zaman i√ßin bildirim denenecek.`);

    for (const reminder of reminderTimes) {
      const reminderDate = new Date(taskDate.getTime() - (reminder.minutes * 60 * 1000));
      
      console.log(`[${reminder.label} i√ßin] Hesaplanan tetikleme tarihi: ${reminderDate.toLocaleString('tr-TR')}`);

      // Hesaplanan zamanƒ±n ge√ßmi≈üte olup olmadƒ±ƒüƒ±nƒ± kontrol et
      if (reminderDate > now) {
        const priorityEmoji = this.getPriorityEmoji(task.category);
        const title = `${priorityEmoji} üï• ${task.title}`;
        const body = `Bu g√∂revin tamamlanmasƒ±na yakla≈üƒ±k ${reminder.label} kaldƒ±.`;

        // Doƒürudan ana bildirim fonksiyonunu √ßaƒüƒ±r
        const notificationId = await this.scheduleNotification(
          title,
          body,
          reminderDate,
          {
            type: 'task_reminder',
            taskId: task.id,
          }
        );

        if (notificationId) {
          scheduledNotifications.push({ id: notificationId, label: reminder.label });
        }
      } else {
        console.log(`‚ùå [${reminder.label} i√ßin] Hatƒ±rlatma zamanƒ± ge√ßmi≈üte. Atlanƒ±yor.`);
      }
    }

    console.log(`‚úÖ Ba≈üarƒ±yla zamanlanan bildirim sayƒ±sƒ±: ${scheduledNotifications.length}`);
    return scheduledNotifications;
  }

  // G√∂rev i√ßin t√ºm bildirimleri iptal et
  async cancelTaskNotifications(taskId) {
    try {
      const allNotifications = await this.getAllScheduledNotifications();
      const taskNotifications = allNotifications.filter(
        notification => notification.content.data.taskId === taskId
      );
      
      for (const notification of taskNotifications) {
        await this.cancelNotification(notification.identifier);
      }
      
      console.log(`${taskNotifications.length} g√∂rev bildirimi iptal edildi`);
      return taskNotifications.length;
    } catch (error) {
      console.error('G√∂rev bildirimleri iptal edilirken hata:', error);
      return 0;
    }
  }

  // √ñdemeler i√ßin bildirimleri zamanla
  async schedulePaymentReminders(payment) {
    const paymentDate = new Date(payment.dueDate);
    const now = new Date();
    const scheduledNotifications = [];
    let notificationSettings;

    try {
      const storedSettings = await AsyncStorage.getItem('notificationSettings');
      // √ñdemeler i√ßin farklƒ± varsayƒ±lanlar kullanabiliriz, √∂rn. daha uzun vadeli hatƒ±rlatmalar
      notificationSettings = storedSettings ? JSON.parse(storedSettings) : {
        enabled: true,
        tenMinutes: false,
        thirtyMinutes: false,
        oneHour: true,
        threeHours: false,
        twentyFourHours: true, // Varsayƒ±lan olarak 1 g√ºn √∂nce
      };
    } catch (error) {
      console.error('Bildirim ayarlarƒ± okunurken hata, varsayƒ±lanlar kullanƒ±lƒ±yor:', error);
      notificationSettings = { enabled: true, oneHour: true, twentyFourHours: true };
    }

    if (!notificationSettings.enabled) {
      console.log('Bildirimler kullanƒ±cƒ± tarafƒ±ndan kapatƒ±lmƒ±≈ü, √∂deme bildirimi kurulmayacak.');
      return [];
    }

    const reminderTimes = [
      { minutes: 60, label: '1 saat', setting: 'oneHour' },
      { minutes: 180, label: '3 saat', setting: 'threeHours' },
      { minutes: 1440, label: '24 saat', setting: 'twentyFourHours' },
    ].filter(rt => notificationSettings[rt.setting]);


    for (const reminder of reminderTimes) {
      const reminderDate = new Date(paymentDate.getTime() - (reminder.minutes * 60 * 1000));
      
      if (reminderDate > now) {
        const title = `üí∞ Yakla≈üan √ñdeme: ${payment.title}`;
        const body = `Bu √∂demenin son g√ºn√ºne yakla≈üƒ±k ${reminder.label} kaldƒ±.`;

        const notificationId = await this.scheduleNotification(
          title,
          body,
          reminderDate,
          { type: 'payment_reminder', paymentId: payment.id }
        );

        if (notificationId) {
          scheduledNotifications.push({ id: notificationId, label: reminder.label });
        }
      }
    }
    console.log(`‚úÖ ${scheduledNotifications.length} √∂deme bildirimi ba≈üarƒ±yla zamanlandƒ±.`);
    return scheduledNotifications;
  }

  // √ñdeme i√ßin t√ºm bildirimleri iptal et
  async cancelPaymentNotifications(paymentId) {
    try {
      const allNotifications = await this.getAllScheduledNotifications();
      const paymentNotifications = allNotifications.filter(
        notification => notification.content.data.paymentId === paymentId
      );
      
      for (const notification of paymentNotifications) {
        await this.cancelNotification(notification.identifier);
      }
      
      console.log(`üí∞ ${paymentNotifications.length} √∂deme bildirimi iptal edildi (ID: ${paymentId})`);
      return paymentNotifications.length;
    } catch (error) {
      console.error('√ñdeme bildirimleri iptal edilirken hata:', error);
      return 0;
    }
  }

  // T√ºm zamanlanmƒ±≈ü bildirimleri iptal et
  async cancelAllNotifications() {
    try {
      await Notifications.cancelAllScheduledNotificationsAsync();
      console.log('T√ºm zamanlanmƒ±≈ü bildirimler iptal edildi');
      return true;
    } catch (error) {
      console.error('Bildirimler iptal edilirken hata:', error);
      return false;
    }
  }

  // Belirli bir bildirimi iptal et
  async cancelNotification(notificationId) {
    try {
      await Notifications.cancelScheduledNotificationAsync(notificationId);
      console.log('Bildirim iptal edildi:', notificationId);
      return true;
    } catch (error) {
      console.error('Bildirim iptal edilirken hata:', error);
      return false;
    }
  }

  // Zamanlanmƒ±≈ü bildirimleri listele
  async getAllScheduledNotifications() {
    try {
      const notifications = await Notifications.getAllScheduledNotificationsAsync();
      console.log('Zamanlanmƒ±≈ü bildirimler:', notifications);
      return notifications;
    } catch (error) {
      console.error('Zamanlanmƒ±≈ü bildirimler alƒ±nƒ±rken hata:', error);
      return [];
    }
  }

  // Test bildirimi g√∂nder
  async sendTestNotification() {
    const title = 'üéâ DoTime Test Bildirimi';
    const body = 'Bildirimler ba≈üarƒ±yla √ßalƒ±≈üƒ±yor! üì±';
    
    return await this.sendImmediateNotification(title, body, {
      type: 'test',
      timestamp: new Date().toISOString(),
    });
  }

  // Bildirim listener'larƒ± ekle
  addNotificationListeners() {
    // Bildirime tƒ±klandƒ±ƒüƒ±nda
    const notificationListener = Notifications.addNotificationReceivedListener(notification => {
      console.log('Bildirim alƒ±ndƒ±:', notification);
    });

    // Bildirime tƒ±klandƒ±ƒüƒ±nda
    const responseListener = Notifications.addNotificationResponseReceivedListener(response => {
      console.log('Bildirime tƒ±klandƒ±:', response);
      
      const data = response.notification.request.content.data;
      if (data.type === 'task_reminder' && data.taskId) {
        // G√∂rev detay sayfasƒ±na y√∂nlendir
        console.log('G√∂rev detayƒ±na y√∂nlendir:', data.taskId);
      }
    });

    return {
      notificationListener,
      responseListener,
    };
  }

  // Listener'larƒ± temizle
  removeNotificationListeners(listeners) {
    if (listeners.notificationListener) {
      Notifications.removeNotificationSubscription(listeners.notificationListener);
    }
    if (listeners.responseListener) {
      Notifications.removeNotificationSubscription(listeners.responseListener);
    }
  }
}

// Singleton pattern
const notificationService = new NotificationService();
export default notificationService; 